#!/usr/bin/env ruby
# ********** Copyright 2016 Viacom, Inc. Apache 2.0 **********

$:.unshift File.join(File.dirname(__FILE__), "..", "lib")

#require "byebug"
require "roku_builder"

RokuBuilder.run()



#  opts.on("-l", "--sideload", "Command: Sideload an app") do
#    options[:sideload] = true
#  end
#
#  opts.on("-p", "--package", "Command: Package an app") do
#    options[:package] = true
#  end
#
#  opts.on("-t", "--test", "Command: Test an app") do
#    options[:test] = true
#  end
#
#  opts.on("-L", "--deeplink", "Depricated: Deeplink now just requires -o or --deeplink-options") do
#    options[:deeplink_depricated] = true
#  end
#
#  opts.on("-o", "--deeplink-options OPTIONS", "Command: Deeplink into app. Define options as keypairs. (eg. a:b, c:d,e:f)") do |o|
#    options[:deeplink] = o
#  end
#
#  opts.on("-d", "--delete", "Command: Delete the currently sideloaded app") do
#    options[:delete] = true
#  end
#
#  opts.on("-N", "--nav CMD", "Command: send the given command to the roku") do |n|
#    options[:navigate] = n
#  end
#
#  opts.on("--navigate", "Command: Run interactive navigator") do
#    options[:navigator] = true
#  end
#
#  opts.on("-S", "--screencapture", "Command: save a screencapture to the output file/folder") do
#    options[:screencapture] = true
#  end
#
#  opts.on("-y", "--type TEXT", "Command: type the given text on the roku device") do |t|
#    options[:text] = t
#  end
#
#  opts.on("-b", "--build", "Command: build a zip to be sideloaded") do
#    options[:build] = true
#  end
#
#  opts.on("-k", "--key", "Command: change device key") do
#    options[:key] = true
#  end
#
#  opts.on("--genkey", "Command: generate a new key") do
#    options[:genkey] = true
#  end
#
#  opts.on("--profile COMMAND", "Command: Run various profiler options") do |c|
#    options[:profile] = c
#  end
#
#  opts.on("--screen SCREEN", "Command: show a screen") do |s|
#    options[:screen] = s
#  end
#
#  opts.on("--screens", "Command: show possible screens") do
#    options[:screens] = true
#  end
#
#  opts.on("-m", "--monitor [TYPE]", "Command: run telnet to monitor roku log") do |m|
#    options[:monitor] = m || "main"
#  end
#
#  opts.on("-u", "--update-manifest", "Command: update the manifest file") do
#    options[:update] = true
#  end
#
#  opts.on("-A", "--app-list", "Command: List currently installed apps") do
#    options[:applist] = true
#  end
#
#  opts.on("-M", "--manifest-update", "Update the manifest file while building or packaging") do
#    options[:update_manifest] = true
#  end
#
#  opts.on("-i", "--inspect", "Print inspection information while packaging") do
#    options[:inspect] = true
#  end
#
#  opts.on("-e", "--edit PARAMS", "Edit config params when configuring. (eg. a:b, c:d,e:f)") do |p|
#    options[:edit_params] = p
#  end
#
#  opts.on("-a", "--app ID", "Send App id for deeplinking") do |a|
#    options[:app_id] = a
#  end
#
#  opts.on("-O", "--out PATH", "Output file/folder. If PATH ends in .pkg/.zip/.jpg, file is assumed, otherwise folder is assumed") do |o|
#    options[:out] = o
#  end
#
#  opts.on("-I", "--in PATH", "Input file for sideloading") do |i|
#    options[:in] = i
#  end
#
#  opts.on("-r", "--regexp REGEXP", "A regular expression used to filter monitor logs") do |r|
#    options[:regexp] = r
#  end
#
#  opts.on("-x", "--exclude", "Apply exclude config to sideload") do
#    options[:exclude] = true
#  end


